// Testes automatizados para compliance AdSense
describe('AdSense Policy Compliance', () => {
  beforeEach(() => {
    // Visitar p√°gina inicial
    cy.visit('/');

    // Aguardar carregamento completo
    cy.wait(3000);

    // Aguardar a inicializa√ß√£o do policyGuard se necess√°rio
    cy.window().then((win) => {
      // Tentar inicializar policyGuard se n√£o estiver dispon√≠vel
      if (!win.policyGuard && win.location.hostname === 'localhost') {
        cy.log('‚ö†Ô∏è PolicyGuard n√£o encontrado - ambiente de desenvolvimento');
      }
    });
  });

  describe('Policy Guard System', () => {
    it('should have policy guard active', () => {
      cy.window().should('have.property', 'policyGuard');

      cy.window().then((win) => {
        const status = win.policyGuard.getStatus();
        expect(status).to.have.property('isMonitoring');
      });
    });

    it('should validate page compliance', () => {
      cy.window().then((win) => {
        // Verificar se policyGuard existe e tem o m√©todo forceValidation
        expect(win.policyGuard).to.exist;
        expect(win.policyGuard.forceValidation).to.be.a('function');

        const validation = win.policyGuard.forceValidation();
        expect(validation).to.exist;
        expect(validation).to.have.property('isValid');

        if (!validation.isValid) {
          cy.log('Validation issues:', validation.issues);
        }
      });
    });
  });

  describe('Content Validation', () => {
    it('should have sufficient content on main pages', () => {
      const pages = ['/', '/gids', '/nenpt'];

      pages.forEach((page) => {
        cy.visit(page);
        cy.wait(2000);

        // Verificar se existe elemento main
        cy.get('main').should('exist');

        // Verificar conte√∫do m√≠nimo
        cy.get('main').then(($main) => {
          const textContent = $main.text().replace(/\s+/g, ' ').trim();
          expect(textContent.length).to.be.at.least(
            500,
            `P√°gina ${page} n√£o tem conte√∫do suficiente`
          );
        });
      });
    });

    it('should not have skeleton elements when ads are present', () => {
      // Aguardar tempo suficiente para o carregamento inicial
      cy.wait(2000);

      // Verificar se existem elementos skeleton/loading
      cy.get('body').then(($body) => {
        const skeletonSelectors =
          '.placeholder, .spinner-border, .content-skeleton, .loading, .skeleton';
        const skeletonElements = $body.find(skeletonSelectors);

        if (skeletonElements.length > 0) {
          // Se encontrou elementos skeleton, verificar se est√£o vis√≠veis
          cy.get(skeletonSelectors).should('not.be.visible');
        } else {
          // Se n√£o encontrou elementos skeleton, isso √© bom - p√°gina carregada
          cy.log('‚úÖ Nenhum elemento skeleton encontrado - p√°gina totalmente carregada');
        }
      });
    });

    it('should not have low-value content', () => {
      cy.get('main').then(($main) => {
        const text = $main.text().toLowerCase();

        // Verificar se n√£o cont√©m texto de baixo valor
        expect(text).to.not.contain('lorem ipsum');
        expect(text).to.not.contain('placeholder');
        expect(text).to.not.contain('texto de exemplo');
      });
    });
  });

  describe('Page Structure', () => {
    it('should have proper page structure for ads', () => {
      // Verificar estrutura b√°sica
      cy.get('main').should('exist');
      cy.get('title').should('exist');

      // Verificar se n√£o h√° marca√ß√µes de no-ads
      cy.get('[data-no-ads="true"]').should('not.exist');
    });

    it('should not have blocking overlays', () => {
      // Verificar se n√£o h√° modais ou overlays bloqueando
      cy.get('.modal.show, .overlay:visible, .popup:visible').should('not.exist');
    });
  });

  describe('Ad Elements', () => {
    it('should only load ads when content is ready', () => {
      // Aguardar carregamento
      cy.wait(5000);

      // Verificar se an√∫ncios s√≥ aparecem quando conte√∫do est√° pronto
      cy.get('.adsbygoogle').each(($ad) => {
        // Verificar se o an√∫ncio n√£o est√° em uma p√°gina inadequada
        cy.window().then((win) => {
          const isBlocked = win.document.body.hasAttribute('data-ads-blocked');
          if (!isBlocked) {
            // Se n√£o est√° bloqueado, deve ter conte√∫do suficiente
            cy.get('main').then(($main) => {
              const contentLength = $main.text().replace(/\s+/g, ' ').trim().length;
              expect(contentLength).to.be.at.least(500);
            });
          }
        });
      });
    });

    it('should respect requireContent prop', () => {
      cy.window().then((win) => {
        // Verificar se policyGuard existe
        if (!win.policyGuard || typeof win.policyGuard.forceValidation !== 'function') {
          cy.log('‚ö†Ô∏è PolicyGuard n√£o encontrado - pulando teste');
          return;
        }

        // Obter refer√™ncia ao elemento main
        const main = win.document.querySelector('main');
        if (!main) {
          cy.log('‚ö†Ô∏è Elemento main n√£o encontrado - pulando teste');
          return;
        }

        // Salvar conte√∫do original
        const originalContent = main.innerHTML;

        // Simular conte√∫do insuficiente
        main.innerHTML = '<h1>Teste</h1><p>Pouco conte√∫do</p>';

        // Aguardar um momento para o DOM atualizar
        cy.wait(500).then(() => {
          // For√ßar valida√ß√£o
          const validation = win.policyGuard.forceValidation();

          if (validation && typeof validation.isValid !== 'undefined') {
            expect(validation.isValid).to.be.false;
          } else {
            cy.log('‚ö†Ô∏è Valida√ß√£o retornou resultado inesperado');
          }

          // Restaurar conte√∫do original
          main.innerHTML = originalContent;
        });
      });
    });
  });

  describe('Error Pages', () => {
    it('should not show ads on error pages', () => {
      // Testar p√°gina 404
      cy.visit('/p√°gina-inexistente', { failOnStatusCode: false });
      cy.wait(2000);

      // Verificar se an√∫ncios est√£o bloqueados
      cy.window().then((win) => {
        const isBlocked = win.document.body.hasAttribute('data-ads-blocked');

        if (!isBlocked) {
          // Se n√£o detectou automaticamente, verificar manualmente se √© 404
          const isNotFound =
            win.document.title.toLowerCase().includes('404') ||
            win.document.title.toLowerCase().includes('not found') ||
            win.location.pathname.includes('p√°gina-inexistente');

          if (isNotFound) {
            // √â uma p√°gina de erro, an√∫ncios devem estar bloqueados
            cy.get('.adsbygoogle').should('not.be.visible');
          } else if (win.policyGuard && typeof win.policyGuard.forceValidation === 'function') {
            // Verificar via policy guard se dispon√≠vel
            const validation = win.policyGuard.forceValidation();
            if (validation) {
              expect(validation.isValid).to.be.false;
            }
          }
        } else {
          cy.log('‚úÖ An√∫ncios corretamente bloqueados em p√°gina de erro');
        }
      });
    });
  });

  describe('SPA Navigation', () => {
    it('should revalidate on route changes', () => {
      const routes = ['/', '/gids', '/nenpt'];

      routes.forEach((route) => {
        cy.visit(route);
        cy.wait(2000);

        cy.window().then((win) => {
          if (win.policyGuard && typeof win.policyGuard.forceValidation === 'function') {
            const validation = win.policyGuard.forceValidation();

            if (validation) {
              cy.log(`Route ${route}: ${validation.isValid ? 'Valid' : 'Invalid'}`);

              if (!validation.isValid && validation.issues) {
                cy.log(`Issues: ${JSON.stringify(validation.issues)}`);
              }
            } else {
              cy.log(`Route ${route}: Validation returned null/undefined`);
            }
          } else {
            cy.log(`Route ${route}: PolicyGuard n√£o dispon√≠vel`);
          }
        });
      });
    });
  });

  describe('Development vs Production', () => {
    it('should handle development environment gracefully', () => {
      cy.window().then((win) => {
        const isDev =
          win.location.hostname === 'localhost' || win.location.hostname.includes('127.0.0.1');

        if (isDev) {
          cy.log('üöß Ambiente de desenvolvimento detectado');

          // Em desenvolvimento, o policyGuard pode n√£o estar ativo
          if (!win.policyGuard) {
            cy.log('‚ö†Ô∏è PolicyGuard n√£o encontrado em desenvolvimento - isso √© normal');
          } else {
            cy.log('‚úÖ PolicyGuard encontrado em desenvolvimento');
          }
        } else {
          // Em produ√ß√£o, deve ter o indicador
          cy.get('body').should('contain.text', 'AdSense');
        }
      });
    });
  });

  describe('Console Commands', () => {
    it('should have debug commands available', () => {
      cy.window().then((win) => {
        // Verificar se os comandos est√£o dispon√≠veis
        expect(win).to.have.property('policyGuard');

        if (win.checkAdPolicy) {
          expect(typeof win.checkAdPolicy).to.equal('function');
        }

        if (win.validateAds) {
          expect(typeof win.validateAds).to.equal('function');
        }

        if (win.policyGuard && win.policyGuard.forceValidation) {
          expect(typeof win.policyGuard.forceValidation).to.equal('function');
        }

        cy.log('‚úÖ Debug commands verificados');
      });
    });
  });

  describe('Performance', () => {
    it('should not impact page load performance significantly', () => {
      cy.visit('/');

      // Medir tempo de carregamento
      cy.window().then((win) => {
        const timing = win.performance.timing;
        const loadTime = timing.loadEventEnd - timing.navigationStart;

        // Verificar se n√£o demora mais que 5 segundos
        expect(loadTime).to.be.lessThan(5000);
      });
    });
  });
});
