// Fun√ß√µes auxiliares compartilhadas por v√°rios componentes de an√∫ncios

/**
 * Verifica se a p√°gina tem conte√∫do suficiente para an√∫ncios
 */
export const hasValidContent = () => {
	// Verificar se existe conte√∫do principal real na p√°gina
	const mainContent = document.querySelector('main')
	if (!mainContent) return false

	// Verificar se a p√°gina est√° marcada como sem an√∫ncios
	const noAdsElement = document.querySelector('[data-no-ads="true"]')
	if (noAdsElement) return false

	// Whitelist de p√°ginas funcionais que devem sempre passar na valida√ß√£o
	const currentPath = window.location.pathname.toLowerCase()
	const functionalPages = ['/nenpt', '/gids', '/nenpt/gerenciar-produtos']
	const isFunctionalPage = functionalPages.some(page => currentPath.includes(page))
	
	if (isFunctionalPage) {
		console.log(`‚úÖ P√°gina funcional detectada (${currentPath}) - aplicando valida√ß√£o flexibilizada`)
	}

	// Verificar se h√° placeholders ou skeletons ativos com timeout
	const hasSkeletons = () => {
		const skeletonElements = document.querySelectorAll(
			'.placeholder, .spinner-border, .content-skeleton, .loading, .skeleton',
		)
		
		// Se encontrou skeletons, verificar se s√£o tempor√°rios
		if (skeletonElements.length > 0) {
			// Permitir um tempo m√°ximo para carregamento (15 segundos ap√≥s carregamento da p√°gina)
			const pageLoadTime = performance.now()
			if (pageLoadTime > 15000) {
				console.warn('üö® Skeletons detectados ap√≥s 15s - liberando an√∫ncios for√ßadamente')
				return false // Permitir an√∫ncios mesmo com skeletons
			}
			
			// Verificar se skeletons est√£o realmente vis√≠veis
			const visibleSkeletons = Array.from(skeletonElements).filter(el => {
				const style = window.getComputedStyle(el)
				return style.display !== 'none' && style.visibility !== 'hidden'
			})
			
			if (visibleSkeletons.length === 0) {
				return false // Skeletons n√£o vis√≠veis, permitir an√∫ncios
			}
			
			console.log(`‚è≥ ${visibleSkeletons.length} skeleton(s) vis√≠vel(is) detectado(s) - aguardando carregamento`)
			return true // Bloquear se ainda em tempo de carregamento
		}
		return false
	}
	
	if (hasSkeletons()) return false

	// Verificar p√°ginas "em constru√ß√£o" ou "coming soon"
	const pageTitle = document.title.toLowerCase()
	const constructionKeywords = [
		'constru√ß√£o',
		'desenvolvimento',
		'coming soon',
		'em breve',
		'maintenance',
		'manuten√ß√£o',
	]
	if (constructionKeywords.some((keyword) => pageTitle.includes(keyword)))
		return false

	// Verificar se h√° alertas/modais vis√≠veis que possam interferir
	const alertElements = document.querySelectorAll(
		'.alert:not(.d-none), .modal.show, .overlay:not([style*="none"])',
	)
	if (alertElements.length > 0) return false

	// Verificar se h√° texto suficiente (m√≠nimo reduzido de 500 para 300 caracteres)
	const textContent = mainContent.innerText || ''
	const contentLength = textContent.replace(/\s+/g, ' ').trim().length

	// Para p√°ginas funcionais, ser muito mais flex√≠vel
	const minContentRequired = isFunctionalPage ? 100 : 300

	if (contentLength < minContentRequired) {
		// Para p√°ginas interativas (formul√°rios, calculadoras), ser mais flex√≠vel
		const interactiveElements = mainContent.querySelectorAll(
			'form, input, button, select, textarea, .calculator, .interactive'
		)
		
		// Se h√° elementos interativos, reduzir ainda mais o requisito
		if (interactiveElements.length > 0 && contentLength >= 50) {
			console.log(`üìù P√°gina com ${interactiveElements.length} elementos interativos - requisito de conte√∫do flexibilizado (${contentLength} chars)`)
			// Continuar verifica√ß√£o com requisito flexibilizado
		} else if (interactiveElements.length > 3 || isFunctionalPage) {
			// Se h√° muitos elementos interativos ou √© p√°gina funcional, assumir que √© uma p√°gina v√°lida
			console.log(`üìù P√°gina ${isFunctionalPage ? 'funcional' : 'altamente interativa'} (${interactiveElements.length} elementos) - liberando mesmo com pouco texto (${contentLength} chars)`)
		} else {
			console.log(`‚ùå Conte√∫do insuficiente: ${contentLength}/${minContentRequired} caracteres e poucos elementos interativos (${interactiveElements.length})`)
			return false
		}
	}

	// Verificar se n√£o √© conte√∫do de baixo valor
	const lowValueKeywords = [
		'lorem ipsum',
		'texto de exemplo',
		'placeholder',
		'exemplo de texto',
		'content here',
	]
	if (
		lowValueKeywords.some((keyword) =>
			textContent.toLowerCase().includes(keyword),
		)
	)
		return false

	// Verificar se h√° elementos vazios dominando a p√°gina
	const emptyStateElements = document.querySelectorAll(
		'.empty-state, .no-results, .not-found',
	)
	if (emptyStateElements.length > 0) {
		// Se h√° estados vazios, verificar se ainda h√° conte√∫do suficiente
		const visibleEmptyStates = Array.from(emptyStateElements).filter(
			(el) => {
				const style = window.getComputedStyle(el)
				return style.display !== 'none' && !el.classList.contains('d-none')
			},
		)
		if (visibleEmptyStates.length > 0 && contentLength < 600) {
			console.log(`‚ùå Estados vazios detectados com conte√∫do insuficiente: ${contentLength}/600 caracteres`)
			return false
		}
	}

	console.log(`‚úÖ Conte√∫do v√°lido detectado: ${contentLength} caracteres`)
	return true
}

/**
 * Verifica se a URL atual √© adequada para an√∫ncios
 */
export const isValidPageForAds = (pathname) => {
	const invalidPages = [
		'/404',
		'/error',
		'/skeleton',
		'/loading',
		'/maintenance',
		'/coming-soon',
		'/under-construction',
		'/redirect',
		'/exit',
		'/thank-you',
		'/thanks',
		'/confirmation',
		'/confirm',
		'/navigation',
		'/sitemap',
	]

	return !invalidPages.some((page) =>
		pathname.toLowerCase().includes(page.toLowerCase()),
	)
}
