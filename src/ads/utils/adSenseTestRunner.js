// Script de teste para verificar se as corre√ß√µes do AdSense est√£o funcionando
// Para executar no console do navegador

const testAdSenseFixes = () => {
	console.log('üß™ INICIANDO TESTE DAS CORRE√á√ïES ADSENSE')
	console.log('=' * 50)

	// Teste 1: Verificar se skeletons est√£o sendo detectados corretamente
	console.log('\n1Ô∏è‚É£ TESTE: Detec√ß√£o de Skeletons')
	const skeletonElements = document.querySelectorAll(
		'.placeholder, .spinner-border, .content-skeleton, .loading, .skeleton'
	)
	const visibleSkeletons = Array.from(skeletonElements).filter(el => {
		const style = window.getComputedStyle(el)
		return style.display !== 'none' && style.visibility !== 'hidden'
	})
	
	console.log(`   Total de skeletons: ${skeletonElements.length}`)
	console.log(`   Skeletons vis√≠veis: ${visibleSkeletons.length}`)
	console.log(`   Status: ${visibleSkeletons.length === 0 ? '‚úÖ OK' : '‚ö†Ô∏è PROBLEMA'}`)

	// Teste 2: Verificar conte√∫do da p√°gina
	console.log('\n2Ô∏è‚É£ TESTE: Conte√∫do da P√°gina')
	const mainContent = document.querySelector('main')
	const textContent = mainContent?.innerText || ''
	const contentLength = textContent.replace(/\s+/g, ' ').trim().length
	
	console.log(`   Elemento main: ${mainContent ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}`)
	console.log(`   Caracteres de conte√∫do: ${contentLength}`)
	console.log(`   M√≠nimo requerido: 300`)
	console.log(`   Status: ${contentLength >= 300 ? '‚úÖ OK' : '‚ùå INSUFICIENTE'}`)

	// Teste 3: Verificar elementos interativos
	console.log('\n3Ô∏è‚É£ TESTE: Elementos Interativos')
	const interactiveElements = mainContent?.querySelectorAll(
		'form, input, button, select, textarea, .calculator, .interactive'
	) || []
	
	console.log(`   Elementos interativos: ${interactiveElements.length}`)
	console.log(`   Status: ${interactiveElements.length > 0 ? '‚úÖ OK' : '‚ö†Ô∏è POUCOS'}`)

	// Teste 4: Verificar se hasValidContent funciona
	console.log('\n4Ô∏è‚É£ TESTE: Fun√ß√£o hasValidContent')
	try {
		// Tentar importar a fun√ß√£o (pode n√£o funcionar dependendo do bundler)
		const hasValidContent = window.hasValidContent || (() => {
			console.log('   ‚ö†Ô∏è Fun√ß√£o n√£o dispon√≠vel no escopo global')
			return 'N√£o test√°vel'
		})
		
		const contentValid = hasValidContent()
		console.log(`   Resultado: ${contentValid}`)
		console.log(`   Status: ${contentValid === true ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`)
	} catch (error) {
		console.log(`   ‚ùå Erro ao testar: ${error.message}`)
	}

	// Teste 5: Verificar AdSense Manager
	console.log('\n5Ô∏è‚É£ TESTE: AdSense Manager')
	if (window.adsbygoogle) {
		console.log('   ‚úÖ adsbygoogle dispon√≠vel')
		console.log(`   Array length: ${window.adsbygoogle.length}`)
	} else {
		console.log('   ‚ö†Ô∏è adsbygoogle n√£o dispon√≠vel')
	}

	// Teste 6: Verificar Policy Guard
	console.log('\n6Ô∏è‚É£ TESTE: Policy Guard')
	if (window.policyGuard) {
		console.log('   ‚úÖ policyGuard dispon√≠vel')
		const status = window.policyGuard.getStatus()
		console.log(`   Monitorando: ${status.isMonitoring ? '‚úÖ SIM' : '‚ùå N√ÉO'}`)
		console.log(`   An√∫ncios bloqueados: ${status.adsBlocked ? '‚ùå SIM' : '‚úÖ N√ÉO'}`)
	} else {
		console.log('   ‚ö†Ô∏è policyGuard n√£o dispon√≠vel')
	}

	// Teste 7: Verificar se h√° elementos com data-no-ads
	console.log('\n7Ô∏è‚É£ TESTE: Marca√ß√£o data-no-ads')
	const noAdsElements = document.querySelectorAll('[data-no-ads="true"]')
	console.log(`   Elementos com data-no-ads: ${noAdsElements.length}`)
	console.log(`   Status: ${noAdsElements.length === 0 ? '‚úÖ OK' : '‚ö†Ô∏è BLOQUEADO'}`)

	// Teste 8: Verificar tempo de carregamento da p√°gina
	console.log('\n8Ô∏è‚É£ TESTE: Performance')
	const pageLoadTime = Math.round(performance.now())
	console.log(`   Tempo desde carregamento: ${pageLoadTime}ms`)
	console.log(`   Status: ${pageLoadTime < 15000 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è LENTO'}`)

	// Resumo final
	console.log('\nüìä RESUMO DO TESTE')
	console.log('=' * 30)
	console.log('Se todos os testes est√£o ‚úÖ, os an√∫ncios devem funcionar')
	console.log('Se h√° ‚ùå ou ‚ö†Ô∏è, pode haver problemas com an√∫ncios')
	console.log('\nPara testar novamente, execute: testAdSenseFixes()')
}

// Tornar dispon√≠vel globalmente
window.testAdSenseFixes = testAdSenseFixes

// Executar automaticamente se em desenvolvimento
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
	console.log('üîß Script de teste AdSense carregado!')
	console.log('Execute testAdSenseFixes() no console para testar')
}

export { testAdSenseFixes }
