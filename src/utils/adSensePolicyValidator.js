// Utilit√°rio para testar compliance com pol√≠ticas do AdSense
export const adSensePolicyValidator = {
  
  // Verificar se a p√°gina atual √© adequada para an√∫ncios
  validateCurrentPage() {
    const results = {
      isValid: true,
      issues: [],
      warnings: [],
      info: []
    };

    // 1. Verificar se h√° marca√ß√£o de no-ads
    const noAdsElement = document.querySelector('[data-no-ads="true"]');
    if (noAdsElement) {
      results.isValid = false;
      results.issues.push('P√°gina marcada como data-no-ads="true"');
    }

    // 2. Verificar conte√∫do skeleton
    const skeletonElements = document.querySelectorAll('.placeholder, .spinner-border, .content-skeleton');
    if (skeletonElements.length > 0) {
      results.isValid = false;
      results.issues.push(`${skeletonElements.length} elementos skeleton/loading encontrados`);
    }

    // 3. Verificar quantidade de conte√∫do
    const mainContent = document.querySelector('main');
    if (mainContent) {
      const textContent = mainContent.innerText || '';
      const contentLength = textContent.replace(/\s+/g, ' ').trim().length;
      
      if (contentLength < 300) {
        results.isValid = false;
        results.issues.push(`Conte√∫do insuficiente: ${contentLength} caracteres (m√≠nimo: 300)`);
      } else {
        results.info.push(`Conte√∫do adequado: ${contentLength} caracteres`);
      }
    } else {
      results.isValid = false;
      results.issues.push('Elemento <main> n√£o encontrado');
    }

    // 4. Verificar URL
    const pathname = window.location.pathname;
    const invalidPaths = ['/404', '/error', '/skeleton'];
    const hasInvalidPath = invalidPaths.some(path => pathname.includes(path));
    
    if (hasInvalidPath) {
      results.isValid = false;
      results.issues.push(`URL inadequada para an√∫ncios: ${pathname}`);
    }

    // 5. Verificar elementos de an√∫ncio existentes
    const adElements = document.querySelectorAll('.adsbygoogle');
    results.info.push(`${adElements.length} elementos de an√∫ncio encontrados`);

    // 6. Verificar se h√° iframes de an√∫ncio carregados
    const adIframes = document.querySelectorAll('iframe[id*="google_ads"]');
    results.info.push(`${adIframes.length} an√∫ncios carregados`);

    return results;
  },

  // Gerar relat√≥rio detalhado
  generateReport() {
    const validation = this.validateCurrentPage();
    
    console.log('=== ADSENSE POLICY VALIDATION REPORT ===');
    console.log(`P√°gina: ${window.location.pathname}`);
    console.log(`Status: ${validation.isValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
    console.log('');
    
    if (validation.issues.length > 0) {
      console.log('üö® PROBLEMAS ENCONTRADOS:');
      validation.issues.forEach(issue => console.log(`  - ${issue}`));
      console.log('');
    }
    
    if (validation.warnings.length > 0) {
      console.log('‚ö†Ô∏è  AVISOS:');
      validation.warnings.forEach(warning => console.log(`  - ${warning}`));
      console.log('');
    }
    
    if (validation.info.length > 0) {
      console.log('‚ÑπÔ∏è  INFORMA√á√ïES:');
      validation.info.forEach(info => console.log(`  - ${info}`));
      console.log('');
    }
    
    if (validation.isValid) {
      console.log('‚úÖ Esta p√°gina est√° em compliance com as pol√≠ticas do AdSense');
    } else {
      console.log('‚ùå Esta p√°gina N√ÉO est√° em compliance. Corrija os problemas antes de exibir an√∫ncios.');
    }
    
    console.log('==========================================');
    
    return validation;
  },

  // Monitorar mudan√ßas na p√°gina
  startMonitoring(interval = 5000) {
    const monitor = () => {
      const validation = this.validateCurrentPage();
      if (!validation.isValid) {
        console.warn('‚ö†Ô∏è P√°gina n√£o adequada para an√∫ncios detectada!');
        console.warn('Issues:', validation.issues);
      }
    };

    // Monitorar periodicamente
    const intervalId = setInterval(monitor, interval);
    
    // Monitorar mudan√ßas no DOM
    const observer = new MutationObserver(monitor);
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['data-no-ads', 'class']
    });

    return {
      stop: () => {
        clearInterval(intervalId);
        observer.disconnect();
      }
    };
  },

  // Verificar status dos an√∫ncios carregados
  checkLoadedAds() {
    const adElements = document.querySelectorAll('.adsbygoogle');
    const results = [];

    adElements.forEach((el, index) => {
      const result = {
        index: index + 1,
        slot: el.getAttribute('data-ad-slot'),
        status: el.getAttribute('data-ad-status'),
        hasIframe: !!el.querySelector('iframe'),
        isEmpty: el.innerHTML.trim() === '',
        isVisible: el.offsetWidth > 0 && el.offsetHeight > 0
      };
      results.push(result);
    });

    console.table(results);
    return results;
  }
};

// Adicionar ao window para uso no console
if (typeof window !== 'undefined') {
  window.adSensePolicyValidator = adSensePolicyValidator;
  
  // Comandos de conveni√™ncia
  window.validateAds = () => adSensePolicyValidator.generateReport();
  window.checkAds = () => adSensePolicyValidator.checkLoadedAds();
  window.monitorAds = (interval) => adSensePolicyValidator.startMonitoring(interval);
}
